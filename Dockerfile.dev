# Use a lightweight Node.js Alpine image for minimal footprint
FROM node:22.14.0-alpine

# Set timezone and install necessary packages efficiently
RUN npm install -g npm@11.2.0
RUN apk update && apk add --no-cache \
    yarn \
    tzdata \
    bash \
    && ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime \
    && echo "Asia/Jakarta" > /etc/timezone

# Create a non-root user for security
# RUN addgroup app && adduser -S -G app app

# Set working directory
WORKDIR /app

# Copy essential files first to optimize caching
COPY package.json yarn.lock ./

# Install dependencies before copying source code (leverages Docker layer caching)
RUN yarn install --frozen-lockfile

# Install development tools locally instead of globally (ensuring version consistency)
RUN yarn add --dev ts-node nodemon

# Copy remaining application files
COPY . .

# Ensure logs directory exists and is owned by the app user
# RUN mkdir -p /app/logs && chown -R app:app /app/logs && chmod -R 777 /app/logs


# Switch to non-root user for execution
# USER app

# Define default command for development
CMD ["yarn", "dev"]
